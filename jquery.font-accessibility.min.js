!function (t) { t.fn.easyView = function (e, n) { var o = t(this.selector); if (void 0 === o.data("easyView")) { "string" == typeof e && (e = {}), (a = { selector: o, currentRatio: 100, normalContrast: !0, defaults: { container: "body", tags: ["h1", "h2", "h3", "h4", "h5", "h6", "div", "p", "a", "span", "strong", "em", "ul", "ol", "li"], step: 10, bootstrap: !0, defaultMarkup: '<a href="#decrease" class="decrease-text">Decrease font size</a><a href="#normal" class="reset-text">Normal font size</a><a href="#increase" class="increase-text">Increase font size</a><a href="#contrast" class="contrast-text">Change contrast</a>', increaseSelector: ".increase-text", decreaseSelector: ".decrease-text", normalSelector: ".reset-text", contrastSelector: ".contrast-text", persist: !1 }, options: {}, affectedTags: new Array, mergeOptions: function (e) { t.extend(this.options, this.defaults, e) }, storeDefaults: function () { t.each(this.affectedTags, function (e, n) { t(n).each(function () { var e = t(this), n = e.css("font-size"); n.indexOf("%") > -1 ? (e.data("originalSize", parseInt(n.replace("%", ""))), e.data("originalUnit", "%")) : (e.data("originalSize", parseInt(n.replace(n.substr(-2), ""))), e.data("originalUnit", n.substr(-2))), e.data("originalBackground", e.css("background-color")), e.data("originalColor", e.css("color")) }) }), t(this.options.container).data("originalBackground", t(this.options.container).css("background-color")), t(this.options.container).data("originalColor", t(this.options.container).css("color")) }, createDefaultMarkup: function () { "" == o.html() && o.html(this.options.defaultMarkup) }, setActions: function () { var t = this; o.find(this.options.decreaseSelector).click(function (e) { e.preventDefault(), t.decreaseFont() }), o.find(this.options.normalSelector).click(function (e) { e.preventDefault(), t.resetFont() }), o.find(this.options.increaseSelector).click(function (e) { e.preventDefault(), t.increaseFont() }), o.find(this.options.contrastSelector).click(function (e) { e.preventDefault(), t.changeContrast() }) }, fetchTags: function () { var e = this.affectedTags, n = this.options; t.each(this.options.tags, function (t, o) { e.push(n.container + " " + o) }) }, decreaseFont: function () { this.currentRatio - this.options.step >= 10 && (this.currentRatio = this.currentRatio - this.options.step), this.changeFontSize() }, resetFont: function () { this.currentRatio = 100, this.changeFontSize() }, increaseFont: function () { this.currentRatio = this.currentRatio + this.options.step, this.changeFontSize() }, changeFontSize: function (e) { void 0 !== e && parseInt(e) > 10 && (this.currentRatio = e); var n = this.currentRatio; t.each(this.affectedTags, function (e, o) { t(o).each(function () { var e = t(this); e.css("font-size", e.data("originalSize") * (n / 100) + e.data("originalUnit")) }) }), this.persistConfig() }, changeContrast: function () { var e = this.normalContrast; t(this.affectedTags.join(",")).each(function () { var n = t(this); e ? n.css("color", "#fff") : n.css("color", n.data("originalColor")) }), t(this.options.container).css("color", this.normalContrast ? "#fff" : t(this.options.container).data("originalColor")), t(this.options.container).css("background-color", this.normalContrast ? "#000" : t(this.options.container).data("originalBackground")), this.normalContrast = !this.normalContrast, this.persistConfig() }, persistConfig: function () { this.options.persist && ("undefined" != typeof Storage ? window.localStorage.setItem("easy-view-config", this.getCurrentConfig()) : console.log("Web Storage not available!")) }, getCurrentConfig: function () { var t = { ratio: this.currentRatio, normalContrast: this.normalContrast }; return JSON.stringify(t) }, restoreFromStorage: function () { if (this.options.persist) { var t = window.localStorage.getItem("easy-view-config"); t && (t = JSON.parse(t), this.currentRatio = t.ratio, this.normalContrast = t.normalContrast, this.changeFontSize(), this.changeContrast()) } }, startPlugin: function (t) { this.mergeOptions(t), this.fetchTags(), this.storeDefaults(), this.createDefaultMarkup(), this.setActions(), this.restoreFromStorage() }, executeFunction: function (t, e) { switch (t) { case "decrease": this.decreaseFont(); break; case "reset": this.resetFont(); break; case "increase": this.increaseFont(); break; case "contrast": void 0 !== e && (this.normalContrast = !!e), this.changeContrast(); break; case "setRatio": this.changeFontSize(ratio); break; default: alert("Called function does not exist!") } }, destroy: function () { this.resetFont(), this.normalContrast = !1, this.changeContrast(), o.removeData("easyView") } }).startPlugin(e), o.data("easyView", a) } else { var a = o.data("easyView"); "object" == typeof e ? (a.destroy(), a.startPlugin(e)) : "string" == typeof e ? a.executeFunction(e, n) : alert("Invalid params to start") } } }(jQuery);